{"version":3,"sources":["imageCanvas.js","imageCanvasView.js","App.js","reportWebVitals.js","index.js"],"names":["App","props","saveableCanvas","useState","url","setUrl","useEffect","base64","decode","match","params","console","log","Container","fluid","Row","Col","className","style","fontSize","marginTop","ref","canvasDraw","imgSrc","brushRadius","hideGrid","brushColor","margin","display","canvasHeight","canvasWidth","lazyRadius","Button","variant","onClick","undo","clear","width","getSaveData","window","ReactNativeWebView","postMessage","points","setPoints","perimeter","setPerimeter","area","setArea","axios","get","id","then","response","JSON","stringify","data","originalPerimeter","originalArea","disabled","loadSaveData","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba0f0fed.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport base64 from 'base-64';\nimport CanvasDraw from 'react-canvas-draw';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction App(props) {\n\tlet saveableCanvas;\n\tlet [url, setUrl] = useState(null);\n\t// let [load, setLoad] = useState(false);\n\tuseEffect(() => {\n\t\tsetUrl(base64.decode(props.match.params.url));\n\t\tconsole.log(base64.decode(props.match.params.url));\n\t}, []);\n\treturn (\n\t\turl && (\n\t\t\t<Container fluid>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<h1 style={{ fontSize: '26px', marginTop: '20px' }}>\n\t\t\t\t\t\t\tDraw around the boils/scars and click on submit\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<CanvasDraw\n\t\t\t\t\t\t\tref={(canvasDraw) => (saveableCanvas = canvasDraw)}\n\t\t\t\t\t\t\timgSrc={url}\n\t\t\t\t\t\t\tbrushRadius={2}\n\t\t\t\t\t\t\thideGrid={true}\n\t\t\t\t\t\t\tbrushColor=\"#fff\"\n\t\t\t\t\t\t\tstyle={{ margin: '20px', display: 'inline-block' }}\n\t\t\t\t\t\t\tcanvasHeight={200}\n\t\t\t\t\t\t\tcanvasWidth={200}\n\t\t\t\t\t\t\tlazyRadius={0}\n\t\t\t\t\t\t></CanvasDraw>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"justify-content-md-center\">\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\t\tvariant=\"warning\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsaveableCanvas.undo();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUndo\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsaveableCanvas.clear();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tstyle={{ width: '250px', margin: '25px' }}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconsole.log(saveableCanvas.getSaveData());\n\t\t\t\t\t\t\t\twindow.ReactNativeWebView.postMessage(\n\t\t\t\t\t\t\t\t\tsaveableCanvas.getSaveData()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t)\n\t);\n}\n\nexport default App;\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport base64 from 'base-64';\nimport CanvasDraw from 'react-canvas-draw';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport axios from 'axios';\n\nfunction App(props) {\n\tlet saveableCanvas;\n\tlet [url, setUrl] = useState(null);\n\tlet [points, setPoints] = useState(null);\n\tconst [perimeter, setPerimeter] = useState(null);\n\tconst [area, setArea] = useState(null);\n\t// let [load, setLoad] = useState(false);\n\tuseEffect(() => {\n\t\tsetUrl(base64.decode(props.match.params.url));\n\t\tconsole.log(base64.decode(props.match.params.url));\n\t\taxios.get('/record/get/' + props.match.params.id).then((response) => {\n\t\t\tconsole.log(response);\n\t\t\tsetPoints(JSON.stringify(response.data.points));\n\t\t\tsetPerimeter(response.data.originalPerimeter);\n\t\t\tsetArea(response.data.originalArea);\n\t\t});\n\t}, []);\n\treturn (\n\t\turl && (\n\t\t\t<Container fluid>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<h1 style={{ fontSize: '26px', marginTop: '20px' }}>\n\t\t\t\t\t\t\tOriginal Image\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<CanvasDraw\n\t\t\t\t\t\t\tref={(canvasDraw) => (saveableCanvas = canvasDraw)}\n\t\t\t\t\t\t\timgSrc={url}\n\t\t\t\t\t\t\tbrushRadius={0}\n\t\t\t\t\t\t\thideGrid={true}\n\t\t\t\t\t\t\tbrushColor=\"#fff\"\n\t\t\t\t\t\t\tstyle={{ margin: '20px', display: 'inline-block' }}\n\t\t\t\t\t\t\tcanvasHeight={200}\n\t\t\t\t\t\t\tcanvasWidth={200}\n\t\t\t\t\t\t\tlazyRadius={0}\n\t\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\t></CanvasDraw>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tstyle={{ width: '250px', margin: '25px' }}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t//console.log(points);\n\t\t\t\t\t\t\t\tsaveableCanvas.loadSaveData(points, true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tToggle drawings\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<h6>Perimeter : {perimeter} pixels</h6>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<h6>Area : {area} pixels</h6>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"justify-content-md-center\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tstyle={{ width: '250px', margin: '25px' }}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t//console.log(points);\n\t\t\t\t\t\t\t\twindow.ReactNativeWebView.postMessage(\n\t\t\t\t\t\t\t\t\t'go back'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClick to go back to processed images\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t)\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport ImageCanvas from \"./imageCanvas\";\nimport ImageCanvasView from \"./imageCanvasView\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route\n            path={`/imageCrop/:url`}\n            render={(props) => <ImageCanvas {...props} />}\n          ></Route>\n          <Route\n            path={`/imageView/:url/:id`}\n            render={(props) => <ImageCanvasView {...props} />}\n          ></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}